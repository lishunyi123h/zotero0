#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const sqlite = require('sqlite');

async function run() {
	var argv = process.argv;
	var clientDir = argv[2];
	var db = argv[3];
	if (!clientDir || !db) {
		console.error(`Usage: ${path.basename(argv[1])} /path/to/zotero-client /path/to/zotero.sqlite`);
		process.exitCode = 1;
		return;
	}
	
	var db = await sqlite.open(db);
	
	var data = {
		itemTypes: [],
		locales: {}
	};
	
	var rows = await db.all("SELECT typeName FROM itemTypes");
	for (let { typeName } of rows) {
		let typeData = {
			itemType: typeName,
			fields: [],
			creatorTypes: []
		};
		
		// Fields
		let sql = "SELECT F.fieldName AS field, BF.fieldName AS baseField "
			+ "FROM itemTypeFields "
			+ "JOIN itemTypes IT USING (itemTypeID) "
			+ "JOIN fields F USING (fieldID) "
			+ "LEFT JOIN baseFieldMappings BFM ON (IT.itemTypeID=BFM.itemTypeID AND F.fieldID=BFM.fieldID) "
			+ "LEFT JOIN fields BF ON (BFM.baseFieldID=BF.fieldID) "
			+ "WHERE typeName=? ORDER BY orderIndex"
		let rows = await db.all(sql, typeName);
		for (let { field, baseField } of rows) {
			let fieldData = {};
			fieldData.field = field;
			if (baseField) {
				fieldData.baseField = baseField;
			}
			typeData.fields.push(fieldData);
		}
		
		// Creator types
		sql = "SELECT creatorType, primaryField FROM itemTypeCreatorTypes "
			+ "JOIN itemTypes USING (itemTypeID) "
			+ "JOIN creatorTypes USING (creatorTypeID) "
			+ "WHERE typeName=? ORDER BY primaryField=0";
		rows = await db.all(sql, typeName);
		for (let { creatorType, primaryField } of rows) {
			let creatorData = {
				creatorType
			};
			if (primaryField) {
				creatorData.primary = true;
			}
			typeData.creatorTypes.push(creatorData);
		}
		
		data.itemTypes.push(typeData);
	}
	
	// Localized strings
	var itemTypeRows = await db.all("SELECT typeName AS name FROM itemTypes");
	var fieldRows = await db.all("SELECT fieldName AS name FROM fields UNION SELECT 'dateAdded' UNION SELECT 'dateModified' UNION SELECT 'itemType'");
	var creatorTypeRows = await db.all("SELECT creatorType AS name FROM creatorTypes");
	var dirs = fs.readdirSync(path.join(clientDir, 'chrome', 'locale'));
	for (let locale of dirs) {
		if (!/^[a-z]{2}(-[A-Z]{2})?/.test(locale)) {
			continue;
		}
		
		data.locales[locale] = {
			itemTypes: {},
			fields: {},
			creatorTypes: {}
		};
		
		// Read in zotero.properties file for locale
		let props = fs.readFileSync(
			path.join(clientDir, 'chrome', 'locale', locale, 'zotero', 'zotero.properties')
		);
		let lines = props.toString().split(/\n/g);
		let strings = new Map();
		for (let line of lines) {
			let [ key, str ] = line.split(/\s*=\s*/);
			strings.set(key, str);
		}
		
		data.locales[locale].itemTypes = getLocalizedStrings(locale, strings, 'itemTypes', itemTypeRows);
		data.locales[locale].fields = getLocalizedStrings(locale, strings, 'itemFields', fieldRows);
		data.locales[locale].creatorTypes = getLocalizedStrings(locale, strings, 'creatorTypes', creatorTypeRows);
	}
	
	console.log(JSON.stringify(data, null, '\t'));
}

function getLocalizedStrings(locale, strings, prefix, rows) {
	var data = {};
	for (let { name } of rows) {
		let key = prefix + '.' + name;
		if (!strings.has(key)) {
			// 'type' is only a base field, so it doesn't have a string
			if (key == 'itemFields.type') {
				continue;
			}
			throw new Error(`Localized string ${key} missing for ${locale}`);
		}
		data[name] = strings.get(key);
	}
	return data;
}

run();
